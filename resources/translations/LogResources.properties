Debug = debug
Info = info
Error = error
SleepAFail = Client::run sleepA failed {0}
SleepBFail = Client::run sleepB failed {0}
RunException = Client::run exception {0} stacktrace: {1}
GotWork = Got work to do id: {0} frame: {1}
RunExceptionD = Client::run exception(D) {0} stacktrace: {1}
SenderLoopFail = Client::senderLoop confirm failed, ret: {0}
WillValidate = will validate {0}
ErrorSendingDisabled = Error sending is disabled, do not send log
SendingError = Sending error to server (type: {0})
DownloadExecutableProblem = Client::work problem with downloadExecutable (ret {0})
DownloadSceneFileProblem = Client::work problem with downloadSceneFile (ret {0})
PrepareWorkingDirectory = Client::work problem with this.prepareWorkingDirectory (ret {0})
NoSceneFile = Client::work job preparation failed (scene file ''{0}'' does not exist)
NoRendererFile = Client::work job preparation failed (renderer file ''{0}'' does not exist)
WorkProblem = Client::work problem with runRenderer (ret {0})
HTTPGetFileProblemDetailed = Client::downloadFile problem with Utils.HTTPGetFile (return: {0}) removing local file (path: {1})
MD5MismatchDetailed2 = Client::downloadFile problem with Client::checkFile mismatch on md5, removing local file (path: {0})
DownloadFileRetry = Client::downloadFile failed, let''s try again ({0}/{1}) ...
DownloadFileFail = Client::downloadFile failed after {0} attempts, removing local file (path: {1}), stopping...
MD5NonExistent = Client::checkFile cannot check md5 on a nonexistent file (path: {0})
MD5MismatchDetailed1 = Client::checkFile mismatch on md5 local: ''{0}'' server: ''{1}'' (local size: {2})
ReuploadSleep = Sleep for 32s before trying to re-upload the frame
ServerKill = Server::keeepmealive server asked to kill local render process
CantConnectToServer = Server::keeepmealive can not connect to server
GetConfigurationURL = Server::getConfiguration url {0}
ParseXMLSAXException = getConfiguration error: failed to parse XML SAXException {0}
ParseXMLIOException = getConfiguration error: failed to parse XML IOException {0}
ParseXMLConfigException = getConfiguration error: failed to parse XML ParserConfigurationException {0}
ParseXMLNoConfig = getConfiguration error: failed to parse XML, no node ''config''
ParseXMLNoRequest = getConfiguration error: failed to parse XML, node ''config'' has no child node ''request''
GetConfigInvalidResponse = Server::getConfiguration: Invalid response {0} {1}
GetConfigConnectException = Server::getConfiguration error ConnectException {0}
GetConfigUnknownHost = Server::getConfiguration error UnknownHostException {0}
GetConfigNoRouteToHost = Server::getConfiguration error NoRouteToHost {0}
GetConfig02R = Server::getConfiguration: exception 02R {0}
RequestJobNotify = Server::requestJob
RequestJobNotOK = Server::requestJob: Utils.statusIsOK(document, ''jobrequest'') -> ret {0}
HTTPRequestInfo = Server::HTTPRequest url({0})
HTTPGetFileNotOk = Server::HTTPGetFile({0}, ...) HTTP code is not {1} it''s {2}
FileDownloaded = File downloaded at {0} kB/s
HTTPGetFileException = Server::HTTPGetFile exception {0} stacktrace {1}
HTTPGetFileWillFail = Server::HTTPGetFile({0}, ...) will failed (end of function)
HTTPSendFileInfo = Server::HTTPSendFile({0},{1})
HTTPSendFileNoSuchAlgorithm = Server::HTTPSendFile, exception NoSuchAlgorithmException {0}
HTTPSendFileKeyManagement = Server::HTTPSendFile, exception KeyManagementException {0}
HTTPSendFileMalformedURL = Server::HTTPSendFile, exception MalformedURLException {0}
HTTPSendFileIOException = Server::HTTPSendFile, exception IOException {0}
HTTPSendFileException = Server::HTTPSendFile, exception Exception {0}
HTTPSendFileWrongStatus = Server::HTTPSendFile wrong status (is {0})
GetLastRenderNotOk = Server::getLastRender code not ok {0}
GetLastRenderSize0 = Server::getLastRender size is 0
GetCreditsEarnedOnCurrentSessionNotOk = Server::getCreditEarnedOnCurrentSession code not ok {0}
GenerateXMLException = Server::generateXMLForMD5cache {0}
HandleMD5DeleteDocumentInfo = Server::handleFileMD5DeleteDocument delete old file {0}
RunRendererUnknown = Client:runRenderer exception on script generation, will return UNKNOWN {0} stacktrace {1}
RendererOutputNotify = renderer output
RunRendererExceptionB = Client:runRenderer exception(B) (silent error) {0}
EndOfRenderingNotify = end of rendering
RunRendererExceptionA = Client:runRenderer exception(A) {0} stacktrace {1}
RunRendererNoPicture = Client::runRenderer no picture file found (after finished render (filename_without_extension {0})
RunRendererKilled = Client::runRenderer renderer didn''t generate any frame but died due to a kill request
RunRendererCrash = Client::runRenderer crash file found => the renderer crashed
RunRendererReturn127 = Client::runRenderer renderer returned 127 and took {0}s, some libraries may be missing
RunRendererPictureFilename = Client::runRenderer pictureFilename: ''{0}''
UpdateRenderingStatusParse = Client::updateRenderingStatus ParseException {0}
GenericGUIStatus = GUI {0}
GenericError = Error {0}
ClientVersion = client version {0}
NoLowPriorityBinary = No low priority binary, will not launch renderer in normal priority
FailedToFindLoPriorityBinary = Failed to find low priority binary, will not launch renderer in normal priority ({0})
UnzipFileIntoDirException = Utils::unzipFileIntoDirectory({0},{1}) exception {2}
